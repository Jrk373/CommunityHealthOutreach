---
title: "Community Health Outreach"
subtitle: ""
author: 
  name: "John Ryan Kivela, MA"
  email: "Ryan.Kivela@narbha.org"
  affiliation: "The Alliance ACO"
date: today
date-format: long
format:
  html:
    theme: pulse
    embed-resources: true
    toc: true
    toc-depth: 6
    code-fold: true
    footnotes-hover: true
---

This document provides the data framework for the Community Health Outreach project. The core datasets used in that evaluation are collected through the code herein. 

# Method

## r Setup

```{r}
#| label: Setup
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Load Libraries
library(tidyverse)
library(readxl)
library(odbc)
library(stringr)

# Set up ODBC Connection
# QRPTP01 <- DBI::dbConnect(odbc::odbc(),"AllianceData")

# adjust to allow viewing of more columns
options(width = 999)
```

## Pre-load data for testing

These are datasets that are created in the Framework. They are written to CSV in the Framework, and can be imported directly here if they are not already present in the environment. 

```{r}
#| label: Pre-Load Data
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

AllianceEnrolledMembers <- read.csv("./data/input/AllianceEnrolledMembers.csv")

Claims_AllHCA <- read.csv("./data/input/Claims_AllHCA.csv")

ClaimsAMM_AllHCA <- read.csv("./data/input/ClaimsAMM_AllHCA.csv")

ClaimsPBM_AllHCA <- read.csv("./data/input/Claims_AllHCA.csv")

Data_VBPQR_AllRecords <- read.csv("./data/input/Data_VBPQR_AllRecords.csv")

HHPrescriberNPI <- read.csv("./documents/HHPrescriberNPI.csv")

```

## Common Objects

```{r}
#| label: Create Common Objects
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Create table for inline code
# InLineCode <- data.frame(
#   Column1 = "text")

# Vector of Alliance Provider Name
Provider_ShortName <- (c("CBI", "CPIH", "EHS", "LCBHC", "MMHC", "SHG", "SBH", "TGC", "WYGC"))

# Vector of NAZ Counties
NAZ_Counties <- (c("Apache", "Coconino", "Mohave", "Navajo", "Yavapai"))

# Create provider shortnames based on TIN
# Create a data frame called ProviderShortnames
ProviderTIN <- 
  data.frame(
  BHHProvider_TIN = c("86-0206928", "86-0206928", "86-0207499", "86-0214457", "86-0215065", "86-0223720", "86-0250938", "86-0290033", "86-0473221", "94-2880847"),
  BHHShortName = c("PH", "WYGC", "SHG", "MMHC", "CPIH", "TGC", "LCBHC", "SBH", "EHS", "CBI")
  )

# Create a list with the ultimate column names for the data
VBPTrendReport_colnames <- 
  c("ClaimsAdjudicatedThrough",
    "AllianceProviderTIN",
    "ProviderShortname",
    "HealthHomeName",
    "MemberID",
    "LastName",
    "FirstName",
    "MeasureID",
    "Measure",
    "GapStatus")

# COntract Measures List
ContractMeasures <- c("AMM", "FUH", "FUM", "HDO", "FUA")

# HEDIS Value Sets
MyHEDIS2023_AllValueSetsToCodes <- read_xlsx("./documents/M. HEDIS MY 2023 Volume 2 Value Set Directory 2023-03-31 - Copy.xlsx", sheet = "Value Sets to Codes")

MyHEDIS2023_MedicationDirectory <- read_xlsx("./documents/HEDIS MY 2023 Medication List Directory 2023-03-31.xlsx", sheet = "Medication Lists to Codes")

# Z Codes
Z_Codes <- read_xlsx("./documents/Z-Codes.xlsx", sheet = "Sheet1")

```

## Procedure

### VBP Quality Roster Indicator 

Create an indicator for if member is on VBPQR and add it to the Enrollment Roster

```{r}
#| label: Create VBPQR Indicator
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Select variables for analysis from VBPQR
VBPQR_filtered <-
  Data_VBPQR_AllRecords |> 
  select(
    ClaimsAdjudicatedThrough,
    AllianceProviderTIN,
    ProviderShortname,
    MemberID,
    MeasureID,
    GapStatus
  ) |> 
  rename("AHCCCSID" = MemberID) |> 
  filter(MeasureID != "HDO")

# Format as date
VBPQR_filtered$ClaimsAdjudicatedThrough <- as.Date(VBPQR_filtered$ClaimsAdjudicatedThrough)

# Step 1: Filter for only the most recent ClaimsAdjudicatedThrough date
VBPQR_filtered <- VBPQR_filtered |>
  group_by(AHCCCSID) |>
  filter(ClaimsAdjudicatedThrough == max(ClaimsAdjudicatedThrough))

# Step 2: Create new columns "AMM", "FUH", and "FUM". This is where the VBPQR indiciator will go.
VBPQR_filtered <- VBPQR_filtered |>
  mutate(AMM = NA, FUH = NA, FUM = NA)

# Step 3: Update new columns based on MeasureID. 
VBPQR_filtered$AMM[VBPQR_filtered$MeasureID == "AMM"] <- VBPQR_filtered$GapStatus[VBPQR_filtered$MeasureID == "AMM"]

VBPQR_filtered$FUH[VBPQR_filtered$MeasureID == "FUH"] <- VBPQR_filtered$GapStatus[VBPQR_filtered$MeasureID == "FUH"]

VBPQR_filtered$FUM[VBPQR_filtered$MeasureID == "FUM"] <- VBPQR_filtered$GapStatus[VBPQR_filtered$MeasureID == "FUM"]

# Collapse data to one row per AHCCCSID with an indicator for each measure.
collapsed_data <- VBPQR_filtered |>
  group_by(AHCCCSID) |>
  summarize(
    AMM = max(AMM, na.rm = TRUE),
    FUH = max(FUH, na.rm = TRUE),
    FUM = max(FUM, na.rm = TRUE)
  )

# Attach the VBPQR indicators to the enrollment roster by AHCCCSID 
CHO_Roster1 <-
  merge(x = AllianceEnrolledMembers,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

# Select variables for analysis
CHO_Roster1 <-
  CHO_Roster1 |> 
  select(1, 3, 4, 5, 6, 8, 9, 10, 11, 13:19, 26:30)

```

## Claims

### Alliance Only

Filter the total claims table for only those people on the Alliance Enrolled Members roster. 

```{r}
#| label: Select Claims
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Select variables to analyze from the claims data
Claims_AllAlliance <-
  Claims_AllHCA |> 
  filter(AHCCCSID %in% AllianceEnrolledMembers$AHCCCSID) |> # Filter for Alliance Members Only
  select(
    Icnno,
    PrimaryID,
    AHCCCSID,
    Age,
    #Age_Group,
    #Population,
    RA,
    Svccode,
    BegDate,
    PrimaryDiagnosis,
    ProviderName,
    Fedtaxid,
    RenderingProviderNpi,
    #PayContract,
    Placesvc,
    ProviderType,
    Dx1, Dx2, DX3, Dx4, Dx5, DX6,
    Dx7, Dx8, DX9, Dx10, Dx11, DX12,
    #Calcnetpd,
    #MemberACCGSA,
    #MemberServiceArea,
    #MemberZipcode,
    #RenderingProviderServiceArea,
    MedicationName,
    MedicationGPI,
    MedicationNDC,
    #EncounterStatus,
    #EncounterStatusDate
  )

# # Filter for only adjudicated paid claims
# Claims_AllAlliance <-
#   Claims_AllAlliance |> 
#     filter(EncounterStatus == "AP")

# Remove any rogues spaces in any field in the data
Claims_AllAlliance <-
  Claims_AllAlliance |> 
  mutate_all(str_squish)

# merge the claims data with the CHO tool
CHO_Roster2 <-
  merge(x = Claims_AllAlliance,
        y = CHO_Roster1,
        by = "AHCCCSID",
        all = TRUE)

# Remove some extra variables that we don't need right now
# CHO_Roster2 <-
#   CHO_Roster2 [, -c(6, 14, 30:33, 37:40, 49)]
```

### Health Home Service Provision

This code provides an indicator for if the person has received services at either: Yes, at HH at least once in the last 6 months; No, never at their HH in the last 6 months: and Yes, the person has received services at both HH and non-HH.
```{r}
#| label: Same prvider indicator
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Clean up Provider TIN data
# Remove any rogues spaces in any field in the data
HHPrescriberNPI <-
  HHPrescriberNPI |> 
  mutate_all(str_squish)

# Indicaters for services by the HH (Including HH prescribers using their own NPI numbers) or not by the HH
ProviderTINMatch <-
  CHO_Roster2 |> 
  mutate(SvcByAssignedBHHTIN = if_else(Fedtaxid == BHHProvider_TIN | RenderingProviderNpi == HHPrescriberNPI$NPI, 1, 0)) |> 
  mutate(SvcByOtherTIN = if_else(Fedtaxid != BHHProvider_TIN & RenderingProviderNpi != HHPrescriberNPI$NPI, 1, 0)) |> 
  select(1, 49, 50)

# Collapse data to a single row per person

# Group by AHCCCSID and summarize using max to check if 1 occurs anywhere
collapsed_data <- ProviderTINMatch |>
  group_by(AHCCCSID) |>
  summarize(
    SvcByAssignedBHHTIN = max(SvcByAssignedBHHTIN),
    SvcByOtherTIN = max(SvcByOtherTIN)
  )

# Apply ifelse to convert max value to 1 if it's greater than 0, else 0
collapsed_data$SvcByAssignedBHHTIN <- ifelse(collapsed_data$SvcByAssignedBHHTIN > 0, 1, 0)
collapsed_data$SvcByOtherTIN <- ifelse(collapsed_data$SvcByOtherTIN > 0, 1, 0)

collapsed_data <-
  collapsed_data |> 
  mutate(SvcByBoth = if_else(SvcByAssignedBHHTIN + SvcByOtherTIN == 2, 1, 0))

# Add new indicators to CHO_Roster1
CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

```

## Add Z-Code Indicators

```{r}
#| label: Z Code indicators
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Assuming CHO_Roster2 is your data frame
# Create new columns Z55, Z56, Z57, Z59, Z60, Z62, Z63, Z64, Z65, Z75
CHO_Roster2$Zcd_Z55 <- 0
CHO_Roster2$Zcd_Z56 <- 0
CHO_Roster2$Zcd_Z57 <- 0
CHO_Roster2$Zcd_Z59 <- 0
CHO_Roster2$Zcd_Z60 <- 0
CHO_Roster2$Zcd_Z62 <- 0
CHO_Roster2$Zcd_Z63 <- 0
CHO_Roster2$Zcd_Z64 <- 0
CHO_Roster2$Zcd_Z65 <- 0
CHO_Roster2$Zcd_Z75 <- 0

# Look through each column starting with Dx
for (col in names(CHO_Roster2)) {
  if (startsWith(col, "Dx")) {
    # Check for any value that starts with "Z55" and update Z55 column
    CHO_Roster2$Zcd_Z55 <- ifelse(grepl("^Z55", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z55)
    # Check for any value that starts with "Z56" and update Z56 column
    CHO_Roster2$Zcd_Z56 <- ifelse(grepl("^Z56", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z56)
    # Check for any value that starts with "Z57" and update Z57 column
    CHO_Roster2$Zcd_Z57 <- ifelse(grepl("^Z57", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z57)
    # Check for any value that starts with "Z59" and update Z59 column
    CHO_Roster2$Zcd_Z59 <- ifelse(grepl("^Z59", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z59)
    # Check for any value that starts with "Z60" and update Z60 column
    CHO_Roster2$Zcd_Z60 <- ifelse(grepl("^Z60", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z60)
    # Check for any value that starts with "Z62" and update Z62 column
    CHO_Roster2$Zcd_Z62 <- ifelse(grepl("^Z62", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z62)
    # Check for any value that starts with "Z63" and update Z63 column
    CHO_Roster2$Zcd_Z63 <- ifelse(grepl("^Z63", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z63)
    # Check for any value that starts with "Z64" and update Z64 column
    CHO_Roster2$Zcd_Z64 <- ifelse(grepl("^Z64", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z64)
    # Check for any value that starts with "Z65" and update Z65 column
    CHO_Roster2$Zcd_Z65 <- ifelse(grepl("^Z65", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z65)
    # Check for any value that starts with "Z75" and update Z75 column
    CHO_Roster2$Zcd_Z75 <- ifelse(grepl("^Z75", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z75)
  }
}

# Look through each column starting with PrimaryDiagnosis
for (col in names(CHO_Roster2)) {
  if (startsWith(col, "PrimaryDiagnosis")) {
    # Check for any value that starts with "Z55" and update Z55 column
    CHO_Roster2$Zcd_Z55 <- ifelse(grepl("^Z55", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z55)
    # Check for any value that starts with "Z56" and update Z56 column
    CHO_Roster2$Zcd_Z56 <- ifelse(grepl("^Z56", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z56)
    # Check for any value that starts with "Z57" and update Z57 column
    CHO_Roster2$Zcd_Z57 <- ifelse(grepl("^Z57", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z57)
    # Check for any value that starts with "Z59" and update Z59 column
    CHO_Roster2$Zcd_Z59 <- ifelse(grepl("^Z59", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z59)
    # Check for any value that starts with "Z60" and update Z60 column
    CHO_Roster2$Zcd_Z60 <- ifelse(grepl("^Z60", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z60)
    # Check for any value that starts with "Z62" and update Z62 column
    CHO_Roster2$Zcd_Z62 <- ifelse(grepl("^Z62", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z62)
    # Check for any value that starts with "Z63" and update Z63 column
    CHO_Roster2$Zcd_Z63 <- ifelse(grepl("^Z63", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z63)
    # Check for any value that starts with "Z64" and update Z64 column
    CHO_Roster2$Zcd_Z64 <- ifelse(grepl("^Z64", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z64)
    # Check for any value that starts with "Z65" and update Z65 column
    CHO_Roster2$Zcd_Z65 <- ifelse(grepl("^Z65", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z65)
    # Check for any value that starts with "Z75" and update Z75 column
    CHO_Roster2$Zcd_Z75 <- ifelse(grepl("^Z75", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z75)
  }
}

# Select columns for analysis
collapsed_data <-
  CHO_Roster2 |> 
  select(1, 49:58)

# Group by AHCCCSID and check for the presence of 1 in each Zcd column
collapsed_data <- CHO_Roster2 |>
  group_by(AHCCCSID) |>
  summarise(across(starts_with("Zcd"), ~ as.integer(any(. == 1))))

# Create a new column with the sum across columns 2 to 11
collapsed_data$Sum_ZCode <- rowSums(collapsed_data[, 2:11], na.rm = TRUE)

# Create an indicator for if any Z codes are present across all diagnoses
collapsed_data <-
  collapsed_data |> 
  mutate(ZCodePresent = if_else(Sum_ZCode > 0, 1, 0))

# Select the first instance of AHCCCSID with priority to ZCode equals 1
selected_data <- collapsed_data %>%
  arrange(AHCCCSID, desc(ZCodePresent)) %>%
  distinct(AHCCCSID, .keep_all = TRUE)

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = selected_data,
        by = "AHCCCSID",
        all.x = TRUE)

```

# Now add Inpatient Indicators

```{r}

# Inpatient Stay and Nonacute Inpatient Stay List

# Filter the MyHEDIS2023_MedicationDirectory for "Inpatient Stay"
InpatientStayValueSet <- MyHEDIS2023_AllValueSetsToCodes |>
  mutate_all(~str_trim(., side = "right")) |> # trim off extra spaces
  filter(`Value Set Name` == "Inpatient Stay")

# Extract the associated code values as a vector
InpatientStayValueSetList <- InpatientStayValueSet$Code

# Filter the MyHEDIS2023_MedicationDirectory for "Inpatient Stay"
NonacuteInpatientValueSet <- MyHEDIS2023_AllValueSetsToCodes |>
  mutate_all(~str_trim(., side = "right")) |> # trim off extra spaces
  filter(`Value Set Name` == "Nonacute Inpatient")

# Extract the associated code values as a vector
NonacuteInpatientValueSetList <- NonacuteInpatientValueSet$Code

CHO_Roster2 <-
  CHO_Roster2 |> 
  mutate(Inpatient = if_else(Svccode %in% InpatientStayValueSetList | Svccode %in% NonacuteInpatientValueSetList, 1, 0))

# Now collapse it



```





















```{r}
#| label: Z-code collapse to single line
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false



```

