---
title: "Community Health Outreach"
subtitle: ""
author: 
  name: "John Ryan Kivela, MA"
  email: "Ryan.Kivela@narbha.org"
  affiliation: "The Alliance ACO"
date: today
date-format: long
format:
  html:
    theme: pulse
    embed-resources: true
    toc: true
    toc-depth: 6
    code-fold: true
    footnotes-hover: true
---

This document provides the data framework for the Community Health Outreach project. The core datasets used in that evaluation are collected through the code herein. 

# Method

## r Setup

```{r}
#| label: Setup
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Load Libraries
library(tidyverse)
library(readxl)
library(odbc)
library(stringr)

# Set up ODBC Connection
# QRPTP01 <- DBI::dbConnect(odbc::odbc(),"AllianceData")

# adjust to allow viewing of more columns
options(width = 999)
```

## Pre-load data for testing

```{r}
#| label: Pre-Load Data
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

AllianceEnrolledMembers <- read.csv("./data/input/AllianceEnrolledMembers.csv")

Claims_AllHCA <- read.csv("./data/input/Claims_AllHCA.csv")

ClaimsAMM_AllHCA <- read.csv("./data/input/ClaimsAMM_AllHCA.csv")

ClaimsPBM_AllHCA <- read.csv("./data/input/Claims_AllHCA.csv")

Data_VBPQR_AllRecords <- read.csv("./data/input/Data_VBPQR_AllRecords.csv")

```

## Common Objects

```{r}
#| label: Create Common Objects
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Create table for inline code
# InLineCode <- data.frame(
#   Column1 = "text")

# Vector of Alliance Provider Name
Provider_ShortName <- (c("CBI", "CPIH", "EHS", "LCBHC", "MMHC", "SHG", "SBH", "TGC", "WYGC"))

# Vector of NAZ Counties
NAZ_Counties <- (c("Apache", "Coconino", "Mohave", "Navajo", "Yavapai"))

# Create provider shortnames based on TIN
# Create a data frame called ProviderShortnames
ProviderTIN <- 
  data.frame(
  BHHProvider_TIN = c("86-0206928", "86-0207499", "86-0214457", "86-0215065", "86-0223720", "86-0250938", "86-0290033", "86-0473221", "94-2880847"),
  BHHShortName = c("PH", "SHG", "MMHC", "CPIH", "TGC", "LCBHC", "SBH", "EHS", "CBI")
  )

# Create a list with the ultimate column names for the data
VBPTrendReport_colnames <- 
  c("ClaimsAdjudicatedThrough",
    "AllianceProviderTIN",
    "ProviderShortname",
    "HealthHomeName",
    "MemberID",
    "LastName",
    "FirstName",
    "MeasureID",
    "Measure",
    "GapStatus")

# COntract Measures List
ContractMeasures <- c("AMM", "FUH", "FUM", "HDO", "FUA")

# HEDIS Value Sets
MyHEDIS2023_AllValueSetsToCodes <- read_xlsx("./documents/M. HEDIS MY 2023 Volume 2 Value Set Directory 2023-03-31 - Copy.xlsx", sheet = "Value Sets to Codes")

MyHEDIS2023_MedicationDirectory <- read_xlsx("./documents/HEDIS MY 2023 Medication List Directory 2023-03-31.xlsx", sheet = "Medication Lists to Codes")

# Z Codes
Z_Codes <- read_xlsx("./documents/Z-Codes.xlsx", sheet = "Sheet1")

```

## Procedure

### Create an indicator for if member is on VBPQR and add it to the Enrollment Roster

```{r}
#| label: Create VBPQR Indicator
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Select variables for analysis
VBPQR_filtered <-
  Data_VBPQR_AllRecords |> 
  select(
    ClaimsAdjudicatedThrough,
    AllianceProviderTIN,
    ProviderShortname,
    MemberID,
    MeasureID,
    GapStatus
  ) |> 
  rename("AHCCCSID" = MemberID) |> 
  filter(MeasureID != "HDO")

# Format as date
VBPQR_filtered$ClaimsAdjudicatedThrough <- as.Date(VBPQR_filtered$ClaimsAdjudicatedThrough)

# Step 1: Filter for only the most recent ClaimsAdjudicatedThrough date
VBPQR_filtered <- VBPQR_filtered |>
  group_by(AHCCCSID) |>
  filter(ClaimsAdjudicatedThrough == max(ClaimsAdjudicatedThrough))

# Step 2: Create new columns "AMM", "FUH", and "FUM". This is where the VBPQR indiciator will go.
VBPQR_filtered <- VBPQR_filtered |>
  mutate(AMM = NA, FUH = NA, FUM = NA)

# Step 3: Update new columns based on MeasureID. 
VBPQR_filtered$AMM[VBPQR_filtered$MeasureID == "AMM"] <- VBPQR_filtered$GapStatus[VBPQR_filtered$MeasureID == "AMM"]

VBPQR_filtered$FUH[VBPQR_filtered$MeasureID == "FUH"] <- VBPQR_filtered$GapStatus[VBPQR_filtered$MeasureID == "FUH"]

VBPQR_filtered$FUM[VBPQR_filtered$MeasureID == "FUM"] <- VBPQR_filtered$GapStatus[VBPQR_filtered$MeasureID == "FUM"]

# Collapse data to one row per AHCCCSID with an indicator for each measure.
collapsed_data <- VBPQR_filtered |>
  group_by(AHCCCSID) |>
  summarize(
    AMM = max(AMM, na.rm = TRUE),
    FUH = max(FUH, na.rm = TRUE),
    FUM = max(FUM, na.rm = TRUE)
  )

# Attach the VBPQR indicators to the enrollment roster by AHCCCSID 
CHO_Roster1 <-
  merge(x = AllianceEnrolledMembers,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

```

## Select Claims

```{r}
#| label: Select Claims
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Select variables to analyze from the claims data
Claims_filtered <-
  Claims_AllHCA |> 
  select(
    Icnno,
    PrimaryID,
    AHCCCSID,
    Age,
    Age_Group,
    Population,
    RA,
    Svccode,
    BegDate,
    PrimaryDiagnosis,
    ProviderName,
    Fedtaxid,
    RenderingProviderNpi,
    PayContract,
    Placesvc,
    ProviderType,
    Dx1, Dx2, DX3, Dx4, Dx5, DX6,
    Dx7, Dx8, DX9, Dx10, Dx11, DX12,
    Calcnetpd,
    MemberACCGSA,
    MemberServiceArea,
    MemberZipcode,
    RenderingProviderServiceArea,
    MedicationName,
    MedicationGPI,
    MedicationNDC,
    EncounterStatus,
    EncounterStatusDate
  )

# Filter for Alliance Members Only
Claims_AllAlliance <-
  Claims_filtered |> 
  filter(AHCCCSID %in% AllianceEnrolledMembers$AHCCCSID)

# Filter for only adjudicated paid claims
Claims_AllAlliance <-
  Claims_AllAlliance |> 
    filter(EncounterStatus == "AP")

# Remove any rogues spaces in any field in the data
Claims_AllAlliance <-
  Claims_AllAlliance |> 
  mutate_all(str_squish)

# merge the claims data with the CHO tool
CHO_Roster2 <-
  merge(x = Claims_AllAlliance,
        y = CHO_Roster1,
        by = "AHCCCSID",
        all = TRUE)

# Remove some extra variables that we don't need right now
CHO_Roster2 <-
  CHO_Roster2 [, -c(6, 14, 17:28, 30:33, 37:40, 49)]

# Indicaters for services by the HH or not by the HH
CHO_Roster2 <-
  CHO_Roster2 |> 
  mutate(SvcByAssignedBHHTIN = if_else(Fedtaxid == BHHProvider_TIN, 1, 0)) |> 
  mutate(SvcByOtherTIN = if_else(Fedtaxid != BHHProvider_TIN, 1, 0))

# Write to CSV
write.csv(CHO_Roster2, "./data/output/CHO_Roster2.csv")

```

