---
title: "Alliance Health and Outcomes"
subtitle: ""
author: 
  name: "John Ryan Kivela, MA"
  email: "Ryan.Kivela@narbha.org"
  affiliation: "The Alliance ACO"
date: today
date-format: long
format:
  html:
    theme: pulse
    embed-resources: true
    toc: true
    toc-depth: 6
    code-fold: true
    footnotes-hover: true
---



This document is the outline for the creation of the Alliance Health and Outcomes dataset. The dataset is a collection of enrollment data, demographics, VBP results, and other indicators of clinical conditions and social risk factors. This data will be used for ACO reporting, provider clinical outreach, and predictive modeling.

# Method

## r Setup

This sets up the R Studio with needed packages and other setting for the HTML rendering and data viewing.

```{r}
#| label: Setup
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Load Libraries
library(tidyverse)
library(readxl)
library(odbc)
library(stringr)

# Set up ODBC Connection
# QRPTP01 <- DBI::dbConnect(odbc::odbc(),"AllianceData")

# adjust to allow viewing of more columns
options(width = 999)
```

## Pre-load data for testing

These are datasets that are created in the Alliance Health and Outcomes Framework. There are several data frames produced there with their own processes. Once calculated, the data is written to CSV in the Framework output, and can be imported directly here if they are not already present in the active DEI environment. 

The following data is imported from the Framework:
  -   Alliance Enrolled Members: A data frame including a host of enrollment related data, like demographic data, service history, and social risk factors.
  -   Claims All HCA: A data frame of all paid, approved, adjudicated claims from Health Choice.
  -   VBP QR All Records: a data frame containing all accumulated data from the Value Based Purchasing Quality Roster for the Measurement Year 2023 (MY2023).
  -   Inpatient Census: A data frame of inpatient admissions and discharges for MY2023, as reported by Health Choice. The is based on service authorizations.
  -   Health Home Prescriber NPI: A data frame of current Alliance ACO in-network prescribers, as recorded by Alliance ACO staff.

```{r}
#| label: Pre-Load Data
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

AllianceEnrolledMembers_orig <- read.csv("./data/input/AllianceEnrolledMembers.csv")

Claims_AllHCA <- read.csv("./data/input/Claims_AllHCA.csv")

# ClaimsAMM_AllHCA <- read.csv("./data/input/ClaimsAMM_AllHCA.csv")

# ClaimsPBM_AllHCA <- read.csv("./data/input/Claims_AllHCA.csv")

Data_VBPQR_AllRecords <- read.csv("./data/input/Data_VBPQR_AllRecords.csv")

InpatientCensus <- read.csv("./data/input/AllianceDailyInpatientCensus_All2023.csv")

HHPrescriberNPI <- read.csv("./documents/HHPrescriberNPI.csv")

```

## Common Objects

Common objects are used throughout the program for queries and analysis. 

Common Objects includes:
  -   Provider acronyms
  -   Lists of features like counties
  -   Alliance Provider business information, like National Provider Identification (NPI) numbers,
  -   HEDIS Code Sets
  -   Social Risk Factor Code Set by "Z-Code"

```{r}
#| label: Create Common Objects
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Create table for inline code
# InLineCode <- data.frame(
#   Column1 = "text")

# Vector of Alliance Provider Name
Provider_ShortName <- (c("CBI", "CPIH", "EHS", "LCBHC", "MMHC", "SHG", "SBH", "TGC", "WYGC"))

# Vector of NAZ Counties
NAZ_Counties <- (c("Apache", "Coconino", "Mohave", "Navajo", "Yavapai"))

# Create provider shortnames based on TIN
# Create a data frame called ProviderShortnames
ProviderTIN <- 
  data.frame(
  BHHProvider_TIN = c("86-0206928", "86-0206928", "86-0207499", "86-0214457", "86-0215065", "86-0223720", "86-0250938", "86-0290033", "86-0473221", "94-2880847"),
  BHHShortName = c("PH", "WYGC", "SHG", "MMHC", "CPIH", "TGC", "LCBHC", "SBH", "EHS", "CBI")
  )

# Create a list with the ultimate column names for the data
VBPTrendReport_colnames <- 
  c("ClaimsAdjudicatedThrough",
    "AllianceProviderTIN",
    "ProviderShortname",
    "HealthHomeName",
    "MemberID",
    "LastName",
    "FirstName",
    "MeasureID",
    "Measure",
    "GapStatus")

# Contract Measures List
ContractMeasures <- c("AMM", "FUH", "FUM", "HDO", "FUA")

# HEDIS Value Sets
MyHEDIS2023_AllValueSetsToCodes <- 
  read_xlsx("./documents/M. HEDIS MY 2023 Volume 2 Value Set Directory 2023-03-31 - Copy.xlsx", 
                                             sheet = "Value Sets to Codes")

MyHEDIS2023_MedicationDirectory <- 
  read_xlsx("./documents/HEDIS MY 2023 Medication List Directory 2023-03-31.xlsx", 
                                             sheet = "Medication Lists to Codes")

# Z Codes
Z_Codes <- read_xlsx("./documents/Z-Codes.xlsx", 
                     sheet = "Sheet1")

```

## Procedure

### Enrollment Roster

This first phase imports the Alliance Enrolled Members roster. It makes some changes to formats like date fields.

```{r}
#| label: Enrollment roster
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# format as dates and calculate number of days per enrollment segment
AllianceEnrolledMembers <-
  AllianceEnrolledMembers_orig |> 
    mutate(
    EnrollmentDate = as.Date(EnrollmentDate, format = "%Y-%m-%d"),
    DisenrollmentDate = as.Date(DisenrollmentDate, format = "%Y-%m-%d"),
    DaysPerEnrollment = as.numeric(difftime(DisenrollmentDate, EnrollmentDate, units = "days"))
          )|>
    rename(AHCCCSID = "AhcccsId") |> 
    filter(is.na(DOD))
```

Then we transform the data such that each member is only recorded for their most recent enrollment segment. At the same time we add new features that count the number of enrollments a person has, as well as the total number of days enrolled for their lifetime.

```{r}
#| label: Enrollment segments
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Step 1: Order by most recent enrollment date for each AHCCCSID
AllianceEnrolledMembers <- AllianceEnrolledMembers %>%
  arrange(AHCCCSID, desc(EnrollmentDate))

# Step 2: Group by AHCCCSID and calculate total enrollment segments and sum of DaysPerEnrollment
summary_data <- AllianceEnrolledMembers %>%
  group_by(AHCCCSID) %>%
  summarise(
    TotalSegments = n(),
    SumDaysPerEnrollment = sum(DaysPerEnrollment)
  )

# Step 3: Keep only the most recent enrollment segment
latest_enrollment <- AllianceEnrolledMembers %>%
  group_by(AHCCCSID) %>%
  slice(1)  # Select only the first row for each AHCCCSID (which corresponds to the most recent enrollment)

# Step 4: Merge these 2 back together
AllianceEnrolledMembers <-
  merge(x = latest_enrollment,
        y = summary_data,
        by = "AHCCCSID",
        all.x = TRUE)

```

### VBP Quality Roster

Next we import the Value Based Purchasing roster. This is an aggregate set of data composed of all of the VBP Quality Roster data for all of the Alliance Providers. The process outlined here create indicators for members and the status in the VBP results for MY 2023. The resulting data is added to the base Alliance data.

```{r}
#| label: Create VBPQR Indicator
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Select variables for analysis from VBPQR
VBPQR_filtered <-
  Data_VBPQR_AllRecords |> 
  select(
    ClaimsAdjudicatedThrough,
    AllianceProviderTIN,
    ProviderShortname,
    MemberID,
    MeasureID,
    GapStatus
  ) |> 
  rename("AHCCCSID" = MemberID) |> 
  filter(MeasureID != "HDO")

# Look for "HCI" at the beginning of AHCCCSID values and remove it
VBPQR_filtered$AHCCCSID <- sub("^HCI", "", VBPQR_filtered$AHCCCSID)

# Format claims adjudicated through date as date
VBPQR_filtered$ClaimsAdjudicatedThrough <- as.Date(VBPQR_filtered$ClaimsAdjudicatedThrough)

# Step 1: Filter for only the most recent instance per person, per provider, per measure
VBPQR_filtered <- 
  VBPQR_filtered |>
    group_by(AHCCCSID, ProviderShortname, MeasureID) |>
    filter(ClaimsAdjudicatedThrough == max(ClaimsAdjudicatedThrough))

# Step 2: Create new columns "AMM", "FUH", and "FUM". This is where the VBPQR indiciator will go.
VBPQR_filtered <- 
  VBPQR_filtered |>
    mutate(AMM = NA, FUH = NA, FUM = NA)

# Step 3: Update new columns based on MeasureID. 
VBPQR_filtered$AMM[VBPQR_filtered$MeasureID == "AMM"] <- VBPQR_filtered$GapStatus[VBPQR_filtered$MeasureID == "AMM"]

VBPQR_filtered$FUH[VBPQR_filtered$MeasureID == "FUH"] <- VBPQR_filtered$GapStatus[VBPQR_filtered$MeasureID == "FUH"]

VBPQR_filtered$FUM[VBPQR_filtered$MeasureID == "FUM"] <- VBPQR_filtered$GapStatus[VBPQR_filtered$MeasureID == "FUM"]

# Collapse data to one row per AHCCCSID with an indicator for each measure.
collapsed_data <- 
  VBPQR_filtered |>
    group_by(AHCCCSID) |>
    summarize(
      AMM = max(AMM, na.rm = TRUE),
      FUH = max(FUH, na.rm = TRUE),
      FUM = max(FUM, na.rm = TRUE)
    ) |> 
    mutate(AMM_Ind = if_else(!is.na(AMM), 1, 0),
           FUH_Ind = if_else(!is.na(FUH), 1, 0),
           FUM_Ind = if_else(!is.na(FUM), 1, 0)
           )

# Add the total numbers of VBP measures
collapsed_data <-
  collapsed_data |> 
  mutate(TotalVBP = AMM_Ind + FUH_Ind + FUM_Ind)

# Attach the VBPQR indicators to the enrollment roster by AHCCCSID 
CHO_Roster1 <-
  merge(x = AllianceEnrolledMembers,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)
```

```{r}
#| label: Selection A
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false


# Select variables for analysis:
CHO_Roster1 <- 
  CHO_Roster1 |>
    select(
      AHCCCSID,
      LastName,
      FirstName,
      BHHShortName,
      BHHProvider_TIN,
      EnrollmentDate,
      DisenrollmentDate,
      TotalSegments,
      DaysPerEnrollment,
      SumDaysPerEnrollment,
      DOB,
      Sex,
      PregnancyStatus,
      MilitaryStatus,
      EmploymentStatus,
      SpokenLanguage,
      Race,
      ResZipCode,
      ResCountyName,
      DaysPerEnrollment,
      AMM,
      FUH,
      FUM,
      TotalVBP
    )
```

### Claims

From the corpus of Health Choice claims data, we extract all claims pertaining to people on the Alliance Enrolled Members roster. Then each claim is attach to its respective member the CHO Roster data to each claim. This data frame will be a foundation for creating many indicators.

```{r}
#| label: Select Claims
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Select variables to analyze from the claims data
Claims_AllAlliance <-
  Claims_AllHCA |> 
  filter(AHCCCSID %in% AllianceEnrolledMembers$AHCCCSID) |> # Filter for Alliance Members Only
  select(
    Icnno,
    PrimaryID,
    AHCCCSID,
    Age,
    #Age_Group,
    #Population,
    RA,
    Svccode,
    Modifier1, Modifier2, Modifier3, Modifier4,
    #Units,
    BegDate,
    PrimaryDiagnosis,
    ProviderName,
    Fedtaxid,
    RenderingProviderNpi,
    #PayContract,
    Placesvc,
    ProviderType,
    Dx1, Dx2, DX3, Dx4, Dx5, DX6,
    Dx7, Dx8, DX9, Dx10, Dx11, DX12,
    Calcnetpd,
    #MemberACCGSA,
    #MemberServiceArea,
    #MemberZipcode,
    #RenderingProviderServiceArea,
    MedicationName,
    MedicationGPI,
    MedicationNDC,
    #EncounterStatus,
    #EncounterStatusDate
  ) |> 
  rename(Dx3 = "DX3",
         Dx6 = "DX6",
         Dx9 = "DX9",
         Dx12 = "DX12")

# Remove any rogues spaces in any field in the data
Claims_AllAlliance <-
  Claims_AllAlliance |> 
  mutate_all(str_squish)

# merge the claims data with the CHO tool
CHO_Roster2 <-
  merge(x = CHO_Roster1,
        y = Claims_AllAlliance,
        by = "AHCCCSID",
        all = TRUE)

# CHO_Roster2 <-
#   CHO_Roster2 |> 
#   filter(!is.na(Icnno))

```

### Health Home Service Provision

This code provides an indicator for if the person has received services at either: 

  1.    Yes, at HH at least once in the last 6 months; 
  2.    No, never at their HH in the last 6 months: and 
  3.    Yes, the person has received services at both HH and non-HH.

Calculations for the first option include cases where the service provider was associated with an Alliance Provider, but used a different Tax Identification Number.

```{r}
#| label: Same prvider indicator
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Clean up Provider TIN data
# Remove any rogues spaces in any field in the data
HHPrescriberNPI <-
  HHPrescriberNPI |> 
  mutate_all(str_squish)

# Indicaters for services by the HH (Including HH prescribers using their own NPI numbers) or not by the HH
ProviderTINMatch <- 
  CHO_Roster2 |> 
    mutate(SvcByAssignedBHHTIN = if_else(Fedtaxid == BHHProvider_TIN | RenderingProviderNpi == HHPrescriberNPI$NPI, "Yes", "No")) |>
    mutate(SvcByAssignedBHHTIN = if_else(is.na(SvcByAssignedBHHTIN), "No", SvcByAssignedBHHTIN)) |>
  
    mutate(SvcByOtherTIN = if_else(Fedtaxid != BHHProvider_TIN & RenderingProviderNpi != HHPrescriberNPI$NPI, "Yes", "No")) |>
    mutate(SvcByOtherTIN = if_else(is.na(SvcByOtherTIN), "No", SvcByOtherTIN)) |> 
    
    mutate(SvcByBoth = if_else(SvcByAssignedBHHTIN == "Yes" & SvcByOtherTIN == "Yes", "Yes", "No")) |> 
    
    mutate(AnyServices = if_else(AHCCCSID %in% Claims_AllAlliance$AHCCCSID, "Yes", "No")) |> 
    select(1, 55:59)


# Collapse data to a single row per person
collapsed_data <- ProviderTINMatch %>%
  group_by(AHCCCSID) %>%
  summarise(
    SvcByAssignedBHHTIN = if_else(all(SvcByAssignedBHHTIN == "Yes"), "Yes", "No"),
    SvcByOtherTIN = if_else(all(SvcByOtherTIN == "Yes"), "Yes", "No"),
    SvcByBoth = if_else(all(SvcByBoth == "Yes"), "Yes", "No"),
    AnyServices = if_else(all(AnyServices == "Yes"), "Yes", "No")
  )

# Add new indicators to CHO_Roster1
CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

# Check it
Checkit <- CHO_Roster1 |> select(1, 20:27)

```

### Social Risk Factors 

These indicate if a person has a "Z-Code" diagnosis for each of several categories of social risk factors. In addition, this section provides a summary of the quantity of social risk factors experienced by a given individual.

The social risk factor categories by "Z-Code" are:
  -   Zcd_Z55: Problems related to education and literacy (Z55)
  -   Zcd_Z56: Problems related to employment and unemployment (Z56)
  -   Zcd_Z57: Occupational exposure to risk factors (Z57)
  -   Zcd_Z59: Problems related to housing and economic circumstances (Z59)
  -   Zcd_Z60: Problems related to social environment (Z60)
  -   Zcd_Z62: Problems related to upbringing (Z62)
  -   Zcd_Z63: Other problems related to primary support group, including family circumstances (Z63)
  -   Zcd_Z64: Problems related to certain psychosocial circumstances (Z64)
  -   Zcd_Z65: Problems related to other psychosocial circumstances (Z65)
  -   Zcd_Z75: Problems related to medical facilities and other health care (Z75)

#### All Z-Codes

```{r}
#| label: Z Code indicators
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Assuming CHO_Roster2 is your data frame
# Create new columns Z55, Z56, Z57, Z59, Z60, Z62, Z63, Z64, Z65, Z75
CHO_Roster2$Zcd_Z55 <- 0
CHO_Roster2$Zcd_Z56 <- 0
CHO_Roster2$Zcd_Z57 <- 0
CHO_Roster2$Zcd_Z59 <- 0
CHO_Roster2$Zcd_Z60 <- 0
CHO_Roster2$Zcd_Z62 <- 0
CHO_Roster2$Zcd_Z63 <- 0
CHO_Roster2$Zcd_Z64 <- 0
CHO_Roster2$Zcd_Z65 <- 0
CHO_Roster2$Zcd_Z75 <- 0

# Look through each column starting with Dx
for (col in names(CHO_Roster2)) {
  if (startsWith(col, "Dx")) {
    # Check for any value that starts with "Z55" and update Z55 column
    CHO_Roster2$Zcd_Z55 <- ifelse(grepl("^Z55", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z55)
    # Check for any value that starts with "Z56" and update Z56 column
    CHO_Roster2$Zcd_Z56 <- ifelse(grepl("^Z56", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z56)
    # Check for any value that starts with "Z57" and update Z57 column
    CHO_Roster2$Zcd_Z57 <- ifelse(grepl("^Z57", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z57)
    # Check for any value that starts with "Z59" and update Z59 column
    CHO_Roster2$Zcd_Z59 <- ifelse(grepl("^Z59", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z59)
    # Check for any value that starts with "Z60" and update Z60 column
    CHO_Roster2$Zcd_Z60 <- ifelse(grepl("^Z60", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z60)
    # Check for any value that starts with "Z62" and update Z62 column
    CHO_Roster2$Zcd_Z62 <- ifelse(grepl("^Z62", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z62)
    # Check for any value that starts with "Z63" and update Z63 column
    CHO_Roster2$Zcd_Z63 <- ifelse(grepl("^Z63", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z63)
    # Check for any value that starts with "Z64" and update Z64 column
    CHO_Roster2$Zcd_Z64 <- ifelse(grepl("^Z64", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z64)
    # Check for any value that starts with "Z65" and update Z65 column
    CHO_Roster2$Zcd_Z65 <- ifelse(grepl("^Z65", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z65)
    # Check for any value that starts with "Z75" and update Z75 column
    CHO_Roster2$Zcd_Z75 <- ifelse(grepl("^Z75", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z75)
  }
}

# Look through each column starting with PrimaryDiagnosis
for (col in names(CHO_Roster2)) {
  if (startsWith(col, "PrimaryDiagnosis")) {
    # Check for any value that starts with "Z55" and update Z55 column
    CHO_Roster2$Zcd_Z55 <- ifelse(grepl("^Z55", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z55)
    # Check for any value that starts with "Z56" and update Z56 column
    CHO_Roster2$Zcd_Z56 <- ifelse(grepl("^Z56", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z56)
    # Check for any value that starts with "Z57" and update Z57 column
    CHO_Roster2$Zcd_Z57 <- ifelse(grepl("^Z57", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z57)
    # Check for any value that starts with "Z59" and update Z59 column
    CHO_Roster2$Zcd_Z59 <- ifelse(grepl("^Z59", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z59)
    # Check for any value that starts with "Z60" and update Z60 column
    CHO_Roster2$Zcd_Z60 <- ifelse(grepl("^Z60", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z60)
    # Check for any value that starts with "Z62" and update Z62 column
    CHO_Roster2$Zcd_Z62 <- ifelse(grepl("^Z62", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z62)
    # Check for any value that starts with "Z63" and update Z63 column
    CHO_Roster2$Zcd_Z63 <- ifelse(grepl("^Z63", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z63)
    # Check for any value that starts with "Z64" and update Z64 column
    CHO_Roster2$Zcd_Z64 <- ifelse(grepl("^Z64", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z64)
    # Check for any value that starts with "Z65" and update Z65 column
    CHO_Roster2$Zcd_Z65 <- ifelse(grepl("^Z65", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z65)
    # Check for any value that starts with "Z75" and update Z75 column
    CHO_Roster2$Zcd_Z75 <- ifelse(grepl("^Z75", CHO_Roster2[, col]), 1, CHO_Roster2$Zcd_Z75)
  }
}

# Group by AHCCCSID and check for the presence of 1 in each Zcd column
collapsed_data <- 
  CHO_Roster2 |>
    group_by(AHCCCSID) |>
    summarise(across(starts_with("Zcd"), ~ as.integer(any(. == 1))))

# Create a new column with the sum across columns 2 to 11
collapsed_data$Sum_ZCode <- rowSums(collapsed_data[, 2:11], na.rm = TRUE)

# Create an indicator for if any Z codes are present across all diagnoses
collapsed_data <-
  collapsed_data |> 
  mutate(ZCodePresent = if_else(Sum_ZCode > 0, "Yes", "No"))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

Checkit <- CHO_Roster1 |> select(1, 30:39)

```

#### Homelessness

Next we create a specialized risk factor category that creates an indicator exclusively for the social risk factor homelessness (Z59.00, Z59.01, Z59.02).

```{r}
#| label: Z Code HOmelessness
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Create a new column 'Homelessness' with default value 0
CHO_Roster2$Homelessness <- 0

# Check each column for the homelessness values 'Z59.00, Z59.01, and Z59.02'
for (col in c("PrimaryDiagnosis", "Dx1", "Dx2", "DX3", "Dx4", "Dx5", "DX6", "Dx7", "Dx8", "DX9", "Dx10", "Dx11", "DX12")) {
  CHO_Roster2$Homelessness[CHO_Roster2[[col]] == c("Z59.00", "Z59.01", "Z59.02")] <- 1
}

# Group by AHCCCSID and check for the presence of 1 in Homelessness column
collapsed_data <- 
    CHO_Roster2 |>
      group_by(AHCCCSID) |>
      summarise(Homelessness = as.integer(any(Homelessness == 1)))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

Checkit <- CHO_Roster1 |> select(1, 30:40)

# Add address section here

```

### Inpatient Services

Indicators according to NCQA MY 2024 standards for Follow Up after Hospitalization for Mental Illness (FUH) values sets. These include the Inpatient Stay and Non-acute Inpatient value sets.

```{r}
#| label: Inpatient stay
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Inpatient Stay and Nonacute Inpatient Stay List

# Filter the MyHEDIS2023_MedicationDirectory for "Inpatient Stay"
InpatientStayValueSet <- 
  MyHEDIS2023_AllValueSetsToCodes |>
    mutate_all(~str_trim(., side = "right")) |> # trim off extra spaces
    filter(`Value Set Name` == "Inpatient Stay")

# Extract the associated code values as a vector
InpatientStayValueSetList <- InpatientStayValueSet$Code

# Filter the MyHEDIS2023_MedicationDirectory for "Inpatient Stay"
NonacuteInpatientValueSet <- 
  MyHEDIS2023_AllValueSetsToCodes |>
    mutate_all(~str_trim(., side = "right")) |> # trim off extra spaces
    filter(`Value Set Name` == "Nonacute Inpatient")

# Extract the associated code values as a vector
NonacuteInpatientValueSetList <- NonacuteInpatientValueSet$Code

# create the indicator column
CHO_Roster2 <-
  CHO_Roster2 |> 
  mutate(Inpatient = if_else(Svccode %in% InpatientStayValueSetList | Svccode %in% NonacuteInpatientValueSetList, "Yes", "No"))

# Group by AHCCCSID and check for the presence of 1 in Inpatient column and collapse data so there is only one row per AHCCCSID
collapsed_data <- 
  CHO_Roster2 |>
    group_by(AHCCCSID) |>
    summarise(Inpatient = as.integer(any(Inpatient == "Yes"))) |> 
    mutate(Inpatient = if_else(Inpatient == 1, "Yes", "No"))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

Checkit <- CHO_Roster1 |> select(1, 30:41)

```

#### Cost: Inpatient Services

This assesses the cost of a given members inpatient stays for all inpatient and nonacute inpatient values.

```{r}
#| label: Cost Inpatient stay
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Calculate count, sum, and avg of IP services (all values)
CalcnetPd_IP <-
  CHO_Roster2 |>
  mutate(Calcnetpd = as.numeric(Calcnetpd)) |>
  filter(Svccode %in% c(InpatientStayValueSetList, NonacuteInpatientValueSetList)) |>
  group_by(AHCCCSID) |>
  summarize(count_IP = sum(!is.na(Calcnetpd)),
            total_calcnetpd_IP = sum(Calcnetpd),
            avg_calcnetpd_IP = mean(Calcnetpd)) |> 
  ungroup() |>
  select(AHCCCSID,
         count_IP,
         total_calcnetpd_IP,
         avg_calcnetpd_IP)

# Create a "Finances" table
Outcomes_Financial <- data.frame(AHCCCSID = AllianceEnrolledMembers$AHCCCSID)

Outcomes_Financial <- 
  merge(x = Outcomes_Financial,
        y = CalcnetPd_IP,
        by = "AHCCCSID",
        all.x = TRUE)

# Calculate count, sum, and avg of IP services if they are 0124 or 0126
CalcnetPd_0124 <-
  CHO_Roster2 |>
  mutate(Calcnetpd = as.numeric(Calcnetpd)) |>
  filter(Svccode %in% c("0124", "0126")) |>
  group_by(AHCCCSID) |>
  summarize(count_0124 = sum(!is.na(Calcnetpd)),
            total_calcnetpd_0124 = sum(Calcnetpd),
            avg_calcnetpd_0124 = mean(Calcnetpd)) |> 
  ungroup() |>
  select(AHCCCSID,
         count_0124,
         total_calcnetpd_0124,
         avg_calcnetpd_0124)

Outcomes_Financial <- 
  merge(x = Outcomes_Financial,
        y = CalcnetPd_0124,
        by = "AHCCCSID",
        all.x = TRUE)

```

### Authorized Inpatient Service

This procedure utilizes the Alliance Daily Inpatient Census, which is a daily record obtained from BCBSAZ Health Choice indicating all individuals who are currently inpatient, or who were inpatient and have been discharged. This data is based on authorizations from HC medical management. The Inpatient Census includes cases with admission dates between 2023-01-01 and 2023-12-31.

#### All authorized inpatient stays

This will provide an indicator to the CHO Roster for any case that has an inpatient admission date that was included in the authorized inpatient service data provided by HCA.

```{r}
#| label: Inpatient Census
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Identify all cases on CHO Roster 1 that have an authorized inpatient admission
CHO_Roster1 <-
  CHO_Roster1 |> 
  mutate(Auth_IPAdmit = if_else(AHCCCSID %in% InpatientCensus$AHCCCSID, "Yes", "No"))

# Count the number of admissions for each AHCCCS ID on the Inpatient Census

# Create a summary table grouping by AHCCCSID that counts the number of authorized inpatient admissions
summary_table <- 
  InpatientCensus |>
  group_by(AHCCCSID) |>
  summarise(Sum_Auth_IPAdmits = n())

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = summary_table,
        by = "AHCCCSID",
        all.x = TRUE)

Checkit <- CHO_Roster1 |> select(1, 30:43)

```

#### Maximum Length of Stay (LOS)

This procedure will calculate an individuals length of stay in an authorized inpatient stay. For those cases that do not have a discharge date, the discharge date will be recorded as the last day of the Measurement Year, 2023-12-31. For cases where there was more than 1 admission, the greatest length of stay will be recorded.

```{r}
#| label: Max Length of Stay
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

InpatientCensus <-
  InpatientCensus |> 
    mutate(DischargeDate = if_else(is.na(DischargeDate), "2023-12-31", DischargeDate)) |> #assigns 12/31/2023 to any cases who had not discharged as of the end of the 2023 calendar year to coincide with this range of data
    mutate(AdmissionDate = as.Date(AdmissionDate),
           DischargeDate = as.Date(DischargeDate))

# Calculate length of stay from the admit and discharge dates
summary_table <-
  InpatientCensus |> 
    mutate(LOS = DischargeDate - AdmissionDate) |> 
    select(AHCCCSID, LOS)

# Group by AHCCCSID, arrange by LOS in descending order, and select the first row (max) for each group
max_los_table <- 
  summary_table |>
    group_by(AHCCCSID) |>
    arrange(desc(LOS)) |>
    slice(1) |> 
    rename(Max_LOS = "LOS")

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = max_los_table,
        by = "AHCCCSID",
        all.x = TRUE)

# Group by AHCCCSID and calculate the average LOS
average_los_table <- 
  summary_table |>
    group_by(AHCCCSID = as.integer(AHCCCSID)) |>
    summarise(AVG_LOS = mean(LOS, na.rm = TRUE))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = average_los_table,
        by = "AHCCCSID",
        all.x = TRUE)

Checkit <- CHO_Roster1 |> select(1, 36:45)

```

#### Discharge Dispositions

*This is a topic that we can explore further. The data is somewhat irregular and would require interpretation. For now it is not being included*

### Emergency Department Visits 

Indicator according to NCQA MY 2024 standards for Follow Up after Emergency Department visit for Mental Illness (FUM) values sets.

#### Emergency Department (ED) Value Set

```{r}
#| label: FUM ED
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Inpatient Stay and Nonacute Inpatient Stay List

# Filter the MyHEDIS2023_MedicationDirectory for "ED"
EDValueSet <- MyHEDIS2023_AllValueSetsToCodes |>
  mutate_all(~str_trim(., side = "right")) |> # trim off extra spaces
  filter(`Value Set Name` == "ED")

# Extract the associated code values as a vector
EDValueSetList <- EDValueSet$Code

# create the indicator column
CHO_Roster2 <-
  CHO_Roster2 |> 
  mutate(ED = if_else(Svccode %in% EDValueSetList, 1, 0))

# Group by AHCCCSID and check for the presence of 1 in Inpatient column
collapsed_data <- CHO_Roster2 |>
  group_by(AHCCCSID) |>
  summarise(ED = as.integer(any(ED == 1)))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

Checkit <- CHO_Roster1 |> select(1, 36:71)
```

##### Cost:Emergency Department

```{r}
#| label: Cost ED
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Calculate sum and avg of ED services
CalcnetPd_ED <-
  CHO_Roster2 |>
  mutate(Calcnetpd = as.numeric(Calcnetpd)) |>
  filter(Svccode %in% c(EDValueSetList)) |>
  group_by(AHCCCSID) |>
  summarize(count_ED = sum(!is.na(Calcnetpd)),
            total_calcnetpd_ED = sum(Calcnetpd), 
            avg_calcnetpd_ED = mean(Calcnetpd)) |>
  ungroup() |> 
  select(AHCCCSID,
         count_ED,
         total_calcnetpd_ED,
         avg_calcnetpd_ED)

# Add sum and avg of IP services to CHO
CHO_Roster1 <-
  CHO_Roster1 |>
  left_join(CalcnetPd_ED, by = "AHCCCSID") 

Checkit <- CHO_Roster1 |> select(1, 36:74)

```


#### Mental Illness and Intentional Self-harm (MISH) Value Set

```{r}
#| label: FUM MISH
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Filter the MyHEDIS2023_MedicationDirectory for "Mental Illness and Intentional Self-Harm "
MISHValueSet <- MyHEDIS2023_AllValueSetsToCodes |>
  mutate_all(~str_trim(., side = "right")) |> # trim off extra spaces
  filter(`Value Set Name` == "Mental Illness and Intentional Self-Harm")

# Extract the associated code values as a vector
MISHValueSetList <- MISHValueSet$Code

# Create a new column 'Homelessness' with default value 0
CHO_Roster2$MISH <- 0

# Check each column for the homelessness values 'Z59.00, Z59.01, and Z59.02'
for (col in c("PrimaryDiagnosis", "Dx1", "Dx2", "Dx3", "Dx4", "Dx5", "Dx6", "Dx7", "Dx8", "Dx9", "Dx10", "Dx11", "Dx12")) {
  CHO_Roster2$MISH[CHO_Roster2[[col]] %in% MISHValueSetList] <- 1
}

# Group by AHCCCSID and check for the presence of 1 in Inpatient column
collapsed_data <- CHO_Roster2 |>
  group_by(AHCCCSID) |>
  summarise(MISH = as.integer(any(MISH == 1)))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

Checkit <- CHO_Roster1 |> select(1, 36:75)

```

```{r}
#| label: Cost MISH
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Calculate sum and avg of AOD services
CalcnetPd_MISH <- CHO_Roster2 |>
  mutate(Calcnetpd = as.numeric(Calcnetpd)) |>
  filter(
    PrimaryDiagnosis %in% MISHValueSetList |
    Dx1 %in% MISHValueSetList |
    Dx2 %in% MISHValueSetList |
    Dx3 %in% MISHValueSetList |
    Dx4 %in% MISHValueSetList |
    Dx5 %in% MISHValueSetList |
    Dx6 %in% MISHValueSetList |
    Dx7 %in% MISHValueSetList |
    Dx8 %in% MISHValueSetList |
    Dx9 %in% MISHValueSetList |
    Dx10 %in% MISHValueSetList |
    Dx11 %in% MISHValueSetList |
    Dx12 %in% MISHValueSetList
  ) |>
  group_by(AHCCCSID) |>
  summarize(
    count_MISH = sum(!is.na(Calcnetpd)),
    total_calcnetpd_MISH = sum(Calcnetpd), 
    avg_calcnetpd_MISH = mean(Calcnetpd)
  ) |>
  ungroup() |>
  select(
    AHCCCSID,
    count_MISH,
    total_calcnetpd_MISH,
    avg_calcnetpd_MISH
  )

# Add sum and avg of IP services to CHO
CHO_Roster1 <-
  CHO_Roster1 |>
  left_join(CalcnetPd_MISH, by = "AHCCCSID") 

Checkit <- CHO_Roster1 |> select(1, 36:78)

```

### Antidepressant Medication 

Indicator according to NCQA MY 2024 standards for Antidepressant Medication Management (AMM) values sets.

```{r}
#| label: Antidepressant Medications
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# AMM List

# Filter the MyHEDIS2023_MedicationDirectory for "AMM"
AntidressantMedicationsValueSet <- MyHEDIS2023_MedicationDirectory |>
  mutate_all(~str_trim(., side = "right")) |> # trim off extra spaces
  filter(`Medication List Name` == "Antidepressant Medications")

# Extract the associated code values as a vector
AntidressantMedicationsValueSetList <- AntidressantMedicationsValueSet$Code

# create the indicator column
CHO_Roster2 <-
  CHO_Roster2 |> 
  mutate(AM = if_else(MedicationNDC %in% AntidressantMedicationsValueSetList, 1, 0))

# Group by AHCCCSID and check for the presence of 1 in Inpatient column
collapsed_data <- CHO_Roster2 |>
  group_by(AHCCCSID) |>
  summarise(AM = as.integer(any(AM == 1)))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

Checkit <- CHO_Roster1 |> select(1, 36:79)

```

#### Cost: Antidepressant Medication

```{r}
#| label: Cost AM
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Calculate sum and avg of am services
CalcnetPd_AM <-
  CHO_Roster2 |>
  mutate(Calcnetpd = as.numeric(Calcnetpd)) |>
  filter(MedicationNDC %in% c(AntidressantMedicationsValueSetList)) |>
  group_by(AHCCCSID) |>
  summarize(count_AM = sum(!is.na(Calcnetpd)),
            total_calcnetpd_AM = sum(Calcnetpd), 
            avg_calcnetpd_AM = mean(Calcnetpd)) |>
  ungroup() |> 
  select(AHCCCSID,
         count_AM,
         total_calcnetpd_AM,
         avg_calcnetpd_AM)

# Add sum and avg of IP services to CHO
CHO_Roster1 <-
  CHO_Roster1 |>
  left_join(CalcnetPd_AM, by = "AHCCCSID") 

Checkit <- CHO_Roster1 |> select(1, 36:82)

```

### Substance Use and Dependance

Now add an indicator for Substance Abuse and Dependence according to NCQA MY 2024 standards for AOD Abuse and Dependence Value Set values sets.

#### Alchohol Abuse and Dependence

```{r}
#| label: AOD Substance Use diagnoses
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# AOD Abuse and Dependence  Stay List

# Filter the MyHEDIS2023_MedicationDirectory for "ED"
AODAbuseandDependenceValueSet <- MyHEDIS2023_AllValueSetsToCodes |>
  mutate_all(~str_trim(., side = "right")) |> # trim off extra spaces
  filter(`Value Set Name` == "AOD Abuse and Dependence")

# Extract the associated code values as a vector
AODAbuseandDependenceValueSetList <- AODAbuseandDependenceValueSet$Code

# Create a new column 'Homelessness' with default value 0
CHO_Roster2$AOD <- 0

# Check each column for the homelessness values 'Z59.00, Z59.01, and Z59.02'
for (col in c("PrimaryDiagnosis", "Dx1", "Dx2", "Dx3", "Dx4", "Dx5", "Dx6", "Dx7", "Dx8", "Dx9", "Dx10", "Dx11", "Dx12")) {
  CHO_Roster2$AOD[CHO_Roster2[[col]] %in% AODAbuseandDependenceValueSetList] <- 1
}

# Group by AHCCCSID and check for the presence of 1 in Inpatient column
collapsed_data <- CHO_Roster2 |>
  group_by(AHCCCSID) |>
  summarise(AOD = as.integer(any(AOD == 1)))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

Checkit <- CHO_Roster1 |> select(1, 36:83)
```

##### Cost: Alcohol Abuse and Dependence

```{r}
#| label: Cost AOD
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Calculate sum and avg of AOD services
CalcnetPd_AOD <- CHO_Roster2 |>
  mutate(Calcnetpd = as.numeric(Calcnetpd)) |>
  filter(
    PrimaryDiagnosis %in% AODAbuseandDependenceValueSetList |
    Dx1 %in% AODAbuseandDependenceValueSetList |
    Dx2 %in% AODAbuseandDependenceValueSetList |
    Dx3 %in% AODAbuseandDependenceValueSetList |
    Dx4 %in% AODAbuseandDependenceValueSetList |
    Dx5 %in% AODAbuseandDependenceValueSetList |
    Dx6 %in% AODAbuseandDependenceValueSetList |
    Dx7 %in% AODAbuseandDependenceValueSetList |
    Dx8 %in% AODAbuseandDependenceValueSetList |
    Dx9 %in% AODAbuseandDependenceValueSetList |
    Dx10 %in% AODAbuseandDependenceValueSetList |
    Dx11 %in% AODAbuseandDependenceValueSetList |
    Dx12 %in% AODAbuseandDependenceValueSetList
  ) |>
  group_by(AHCCCSID) |>
  summarize(
    count_AOD = sum(!is.na(Calcnetpd)),
    total_calcnetpd_AOD = sum(Calcnetpd), 
    avg_calcnetpd_AOD = mean(Calcnetpd)
  ) |>
  ungroup() |>
  select(
    AHCCCSID,
    count_AOD,
    total_calcnetpd_AOD,
    avg_calcnetpd_AOD
  )

# Add sum and avg of IP services to CHO
CHO_Roster1 <-
  CHO_Roster1 |>
  left_join(CalcnetPd_AOD, by = "AHCCCSID") 

Checkit <- CHO_Roster1 |> select(1, 50:86)

```

#### Unintentional Overdose

```{r}
#| label: OD Substance USe
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Unintentional Drug Overdose Stay List

# Filter the MyHEDIS2023_MedicationDirectory for "Unintentional Drug Overdose"
UnintentionalDrugOverdoseValueSet <- MyHEDIS2023_AllValueSetsToCodes |>
  mutate_all(~str_trim(., side = "right")) |> # trim off extra spaces
  filter(`Value Set Name` == "Unintentional Drug Overdose")

# Extract the associated code values as a vector
UnintentionalDrugOverdoseValueSetList <- UnintentionalDrugOverdoseValueSet$Code

# Create a new column 'Homelessness' with default value 0
CHO_Roster2$UOD <- 0

# Check each column for the homelessness values 'Z59.00, Z59.01, and Z59.02'
for (col in c("PrimaryDiagnosis", "Dx1", "Dx2", "Dx3", "Dx4", "Dx5", "Dx6", "Dx7", "Dx8", "Dx9", "Dx10", "Dx11", "Dx12")) {
  CHO_Roster2$UOD[CHO_Roster2[[col]] %in% UnintentionalDrugOverdoseValueSetList] <- 1
}

# Group by AHCCCSID and check for the presence of 1 in Inpatient column
collapsed_data <- CHO_Roster2 |>
  group_by(AHCCCSID) |>
  summarise(UOD = as.integer(any(UOD == 1)))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

Checkit <- CHO_Roster1 |> select(1, 50:87)
```

##### Cost: Unintentional overdose

```{r}
#| label: Cost AOD
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Calculate sum and avg of AOD services
CalcnetPd_UOD <- CHO_Roster2 |>
  mutate(Calcnetpd = as.numeric(Calcnetpd)) |>
  filter(
    PrimaryDiagnosis %in% UnintentionalDrugOverdoseValueSetList |
    Dx1 %in% UnintentionalDrugOverdoseValueSetList |
    Dx2 %in% UnintentionalDrugOverdoseValueSetList |
    Dx3 %in% UnintentionalDrugOverdoseValueSetList |
    Dx4 %in% UnintentionalDrugOverdoseValueSetList |
    Dx5 %in% UnintentionalDrugOverdoseValueSetList |
    Dx6 %in% UnintentionalDrugOverdoseValueSetList |
    Dx7 %in% UnintentionalDrugOverdoseValueSetList |
    Dx8 %in% UnintentionalDrugOverdoseValueSetList |
    Dx9 %in% UnintentionalDrugOverdoseValueSetList |
    Dx10 %in% UnintentionalDrugOverdoseValueSetList |
    Dx11 %in% UnintentionalDrugOverdoseValueSetList |
    Dx12 %in% UnintentionalDrugOverdoseValueSetList
  ) |>
  group_by(AHCCCSID) |>
  summarize(
    count_UOD = sum(!is.na(Calcnetpd)),
    total_calcnetpd_UOD = sum(Calcnetpd), 
    avg_calcnetpd_UOD = mean(Calcnetpd)
  ) |>
  ungroup() |>
  select(
    AHCCCSID,
    count_UOD,
    total_calcnetpd_UOD,
    avg_calcnetpd_UOD
  )

# Add sum and avg of IP services to CHO
CHO_Roster1 <-
  CHO_Roster1 |>
  left_join(CalcnetPd_UOD, by = "AHCCCSID") 

Checkit <- CHO_Roster1 |> select(1, 60:91)

```

### Major Depressive Disorder

```{r}
#| label: MDD
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Major Depressive Disorder

# Filter the MyHEDIS2023_MedicationDirectory for "MDD"
MajorDepressionValueSet <- MyHEDIS2023_AllValueSetsToCodes |>
  mutate_all(~str_trim(., side = "right")) |> # trim off extra spaces
  filter(`Value Set Name` == "Major Depression")

# Extract the associated code values as a vector
MajorDepressionValueSetList <- MajorDepressionValueSet$Code

# Create a new column 'Homelessness' with default value 0
CHO_Roster2$MDD <- 0

# Check each column for the homelessness values 'Z59.00, Z59.01, and Z59.02'
for (col in c("PrimaryDiagnosis", "Dx1", "Dx2", "Dx3", "Dx4", "Dx5", "Dx6", "Dx7", "Dx8", "Dx9", "Dx10", "Dx11", "Dx12")) {
  CHO_Roster2$MDD[CHO_Roster2[[col]] %in% MajorDepressionValueSetList] <- 1
}


# Group by AHCCCSID and check for the presence of 1 in Inpatient column
collapsed_data <- CHO_Roster2 |>
  group_by(AHCCCSID) |>
  summarise(MDD = as.integer(any(MDD == 1)))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

Checkit <- CHO_Roster1 |> select(1, 70:92)
```

#### Cost: Major Depressive Disorder

```{r}
#| label: Cost AOD
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Calculate sum and avg of AOD services
CalcnetPd_MDD <- CHO_Roster2 |>
  mutate(Calcnetpd = as.numeric(Calcnetpd)) |>
  filter(
    PrimaryDiagnosis %in% MajorDepressionValueSetList |
    Dx1 %in% MajorDepressionValueSetList |
    Dx2 %in% MajorDepressionValueSetList |
    Dx3 %in% MajorDepressionValueSetList |
    Dx4 %in% MajorDepressionValueSetList |
    Dx5 %in% MajorDepressionValueSetList |
    Dx6 %in% MajorDepressionValueSetList |
    Dx7 %in% MajorDepressionValueSetList |
    Dx8 %in% MajorDepressionValueSetList |
    Dx9 %in% MajorDepressionValueSetList |
    Dx10 %in% MajorDepressionValueSetList |
    Dx11 %in% MajorDepressionValueSetList |
    Dx12 %in% MajorDepressionValueSetList
  ) |>
  group_by(AHCCCSID) |>
  summarize(
    count_MDD = sum(!is.na(Calcnetpd)),
    total_calcnetpd_MDD = sum(Calcnetpd), 
    avg_calcnetpd_MDD = mean(Calcnetpd)
  ) |>
  ungroup() |>
  select(
    AHCCCSID,
    count_MDD,
    total_calcnetpd_MDD,
    avg_calcnetpd_MDD
  )

# Add sum and avg of IP services to CHO
CHO_Roster1 <-
  CHO_Roster1 |>
  left_join(CalcnetPd_MDD, by = "AHCCCSID") 

Checkit <- CHO_Roster1 |> select(1, 80:95)

```

### BIPOC

```{r}
#| label: BIPOC and Ethnicity
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Black, Indigenous, and People of Color
CHO_Roster1 <- CHO_Roster1 |> 
  mutate(Race_BIPOC = if_else(RaceCode != "C" & RaceCode != "7", 1, 0))

# Native American
CHO_Roster1 <- CHO_Roster1 |> 
  mutate(Race_NativeAmerican = if_else(RaceCode == "G", 1, 0))

# Hispanic (any)
CHO_Roster1 <- CHO_Roster1 |> 
  mutate(Ethnicity_HispanicAll = if_else(EthnicityCode == "1" | # Mexican, Mexican American, Chicano/a
                               EthnicityCode == "4" | # Another Hispanic, Latino or Spanish origin
                               EthnicityCode == "5"   # Hispanic or Latino Unknown  
                               , 1, 0))

# Mexican 
CHO_Roster1 <- CHO_Roster1 |> 
  mutate(Ethnicity_Mexican = if_else(EthnicityCode == "1", 1, 0))



Checkit <- CHO_Roster1 |> select(1, 80:99)
```

### Crisis Services

```{r}
#| label: Crisis Services
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

CrisisServices <- 
  data.frame(
    Code = c("H2011", "S9484", "S9485"),
    Description = c("Crisis intervention service, per 15 minutes", 
                    "Crisis intervention mental health service, per hour", 
                    "Crisis intervention mental health service, per diem")
  )

# All Crisis Services
# create the indicator column
CHO_Roster2 <-
  CHO_Roster2 |> 
  mutate(Crisis_all = if_else(Svccode %in% CrisisServices$Code, 1, 0))

# Group by AHCCCSID and check for the presence of 1 in Inpatient column
collapsed_data <- CHO_Roster2 |>
  group_by(AHCCCSID) |>
  summarise(Crisis_all = as.integer(any(Crisis_all == 1)))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

# Community Based
# create the indicator column
# Commenting this out for now because HCA is not rbha, no claims
# CHO_Roster2 <-
#   CHO_Roster2 |> 
#   mutate(Crisis_Community = if_else(Svccode == "H2011", 1, 0))

# Group by AHCCCSID and check for the presence of 1 in Inpatient column
# collapsed_data <- CHO_Roster2 |>
#   group_by(AHCCCSID) |>
#   summarise(Crisis_Community = as.integer(any(Crisis_Community == 1)))
# 
# CHO_Roster1 <-
#   merge(x = CHO_Roster1,
#         y = collapsed_data,
#         by = "AHCCCSID",
#         all.x = TRUE)

# Facility Based
# create the indicator column
CHO_Roster2 <-
  CHO_Roster2 |> 
  mutate(Crisis_Facility = if_else(Svccode %in% c("S9484", "S9485"), 1, 0))

# Group by AHCCCSID and check for the presence of 1 in Inpatient column
collapsed_data <- CHO_Roster2 |>
  group_by(AHCCCSID) |>
  summarise(Crisis_Facility = as.integer(any(Crisis_Facility == 1)))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

# Crisis Services by modifier
CHO_Roster2 <-
  CHO_Roster2 |> 
  mutate(Crisis_Modifier = if_else(Modifier1 =="SE" | Modifier2 == "SE" | Modifier3 == "SE" | Modifier4 == "SE", 1, 0))

# Group by AHCCCSID and check for the presence of 1 in Inpatient column
collapsed_data <- CHO_Roster2 |>
  group_by(AHCCCSID) |>
  summarise(Crisis_Modifier = as.integer(any(Crisis_Modifier == 1)))


Checkit <- CHO_Roster1 |> select(1, 80:101)
```

### Peer and Family Run Organization (PFro) Services

```{r}
#| label: PFro Services
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

PFroProviders <- read.csv("./documents/PFroProviders.csv")

# create the indicator column
CHO_Roster2 <- 
  CHO_Roster2  |> 
  mutate(PFro = if_else(Fedtaxid %in% PFroProviders$ProviderTIN, 1, 0))

# Group by AHCCCSID and check for the presence of 1 in Inpatient column
collapsed_data <- CHO_Roster2 |>
  group_by(AHCCCSID) |>
  summarise(PFro = as.integer(any(PFro == 1)))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)

Checkit <- CHO_Roster1 |> select(1, 80:102)
```

### Marriage, is what bwings us togevah today

```{r}
#| label: Marriage
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Create variables for Married and Divorced
CHO_Roster1 <-
  CHO_Roster1 |> 
  mutate(Married = if_else(MaritalStatus == "Married", 1, 0),
         DivorcedOrSeparated = if_else(MaritalStatus %in% c("Divorced", "Legally Separated"), 1, 0)
         )

Checkit <- CHO_Roster1 |> select(1, 80:104)
```

### Employment

```{r}
#| label: Employment
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Employment Status variables
CHO_Roster1 <-
  CHO_Roster1 |> 
  mutate(Employed = if_else(EmploymentStatus %in% c("Competitively Employed Part Time", "Competitively Employed Full Time"), 1,0),
         Employed_FT = if_else(EmploymentStatus == "Competitively Employed Full Time", 1, 0),
         Employed_PT = if_else(EmploymentStatus == "Competitively Employed Part Time", 1, 0)
  )


# Employment Services
# create the indicator column
CHO_Roster2 <-
  CHO_Roster2 |> 
  mutate(EmploymentServices = if_else(Svccode %in% c("H2025", "H2027"), 1, 0))

# Group by AHCCCSID and check for the presence of 1 in Inpatient column
collapsed_data <- CHO_Roster2 |>
  group_by(AHCCCSID) |>
  summarise(EmploymentServices = as.integer(any(EmploymentServices == 1)))

CHO_Roster1 <-
  merge(x = CHO_Roster1,
        y = collapsed_data,
        by = "AHCCCSID",
        all.x = TRUE)


Checkit <- CHO_Roster1 |> select(1, 80:108)

```

### Spoken Language

```{r}
#| label: Language
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Language Variable
CHO_Roster1 <-
  CHO_Roster1 |> 
  mutate(EnglishSpeaking = if_else(SpokenLanguage == "ENGLISH", 1, 0),
         SpanishSpeaking = if_else(SpokenLanguage == "SPANISH", 1, 0),
         NonEnglishSpeaking = if_else(SpokenLanguage != "ENGLISH", 1, 0)
  )

Checkit <- CHO_Roster1 |> select(1, 80:111)
```

### Total Enrolled days

This last piece takes a sum of all of the days enrolled for all enrollment segments. It then selects ONLY the most recent enrollment segment for each members.

```{r}
#| label: Total enrolled days
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# SUm up all days from all segments
TotsEnrolledDays <-
  CHO_Roster1 |>
  group_by(AHCCCSID) |>
  summarize(TotalDaysEnrolled = sum(DaysPerEnrollment, na.rm = TRUE))

# Filter for only the most recent enrollment segment
CHO_Roster_Final <-
  CHO_Roster1 |>
  group_by(AHCCCSID) |>
  filter(EnrollmentDate == max(EnrollmentDate))

# Merge with the total enrollment days per members
CHO_Roster_Final <-
  merge(x = CHO_Roster_Final,
        y = TotsEnrolledDays,
        by = "AHCCCSID",
        all.x = TRUE)

# Remove extra columns "X"
# CHO_Roster_Final <- CHO_Roster_Final[, -c(2)]

```

```{r}
#| label: Write to CSV
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false
 
write.csv(CHO_Roster_Final, "./data/output/CHO_Roster_Final.csv")


```









